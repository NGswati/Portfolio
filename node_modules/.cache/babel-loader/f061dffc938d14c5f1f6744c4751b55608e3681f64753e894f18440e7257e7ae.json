{"ast":null,"code":"var _s = $RefreshSig$();\n// import React, {useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import '../styles/app.css';\n\n// const App = () => {\n//   const containerRef = useRef(null);\n//   let scene, camera, renderer;\n//   const flowers = [];\n//   const clouds = [];\n//   const textMeshes = [];\n//   const schools = [];\n//   const logos = [];\n\n//   useEffect(() => {\n//     // Scene\n//     scene = new THREE.Scene();\n\n//     // Camera\n//     camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//     camera.position.z = 5;\n//     // camera.position.x =25;\n//     // Renderer\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     containerRef.current.appendChild(renderer.domElement);\n\n//     // Create a cube\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // Create flowers\n//     // function createFlower(x, y, z) {\n//     //   const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n//     //   const flowerMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\n//     //   const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n\n//     //   const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n//     //   const flowerPetalMaterial = new THREE.MeshBasicMaterial({ color: 0xFF69B4 });\n//     //   const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n\n//     //   flowerStem.position.set(x, y, z);\n//     //   flowerPetal.position.set(x, y + 0.6, z);\n\n//     //   scene.add(flowerStem);\n//     //   scene.add(flowerPetal);\n\n//     //   flowers.push({ flowerStem, flowerPetal });\n//     // }\n\n//     // Create clouds\n//     // function createCloud(x, y, z) {\n//     //   const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n//     //   const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n//     //   const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n//     //   cloud.position.set(x, y, z);\n//     //   scene.add(cloud);\n\n//     //   clouds.push(cloud);\n//     // }\n\n//     // Create text labels\n//     function createText(x, y, z, text, size, color, url) {\n//       const loader = new THREE.FontLoader();\n//       loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n//         const textGeometry = new THREE.TextGeometry(text, {\n//           font: font,\n//           size: size,\n//           height: 0.1,\n//           curveSegments: 2,\n//           bevelEnabled: false\n//         });\n//         const textMaterial = new THREE.MeshBasicMaterial({ color: color });\n//         const mesh = new THREE.Mesh(textGeometry, textMaterial);\n//         mesh.position.set(x, y, z);\n//         mesh.castShadow = true;\n//         mesh.userData.url = url;\n//         scene.add(mesh);\n//         textMeshes.push(mesh);\n//       });\n//     }\n\n//     // Create school buildings\n//     function createSchool(x, y, z) {\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: +2, y: 0.8, z: 1.01 },\n//           { x: +2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 1, y, z * 2);\n\n//       scene.add(building1);\n//       scene.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Create sun with rays\n//     function createSun(x, y, z) {\n//       const sunGroup = new THREE.Group();\n\n//       const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//       const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });\n//       const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//       sun.position.set(x, y, z);\n//       sunGroup.add(sun);\n\n//       const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 });\n\n//       for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//         const rayGeometry = new THREE.BufferGeometry();\n//         const vertices = new Float32Array([\n//           x + Math.cos(i) * 2, y + Math.sin(i) * 2, z,\n//           x + Math.cos(i) * 3, y + Math.sin(i) * 3, z\n//         ]);\n//         rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//         const ray = new THREE.Line(rayGeometry, rayMaterial);\n//         sunGroup.add(ray);\n//       }\n\n//       scene.add(sunGroup);\n//       logos.push(sunGroup);\n//     }\n\n//     // Initial setup\n//     // createText(-5.5, 5, -5, \"Welcome to O-rang\", 1, 0xffffff);\n//     // createText(-4.3, 2, -5, \"Hello I am Swati\", 1, 0xffffff);\n//     // createText(-6.4, -3, -5, \"A passionate developer and tech enthusiast\", 0.5, 0xffffff);\n//     // createText(-3, -4.2, -5, \"Let's move forward . .\", 0.5, 0xffffff);\n\n//     createSchool(25, -3, -5);\n//     // createText(30, -3, -5, \"Kendriya Vidyalaya Gorakhpur\", 0.5, 0x7B0000, \"/school\");\n//     createSun(34.5, -2, -5);\n\n//     // Event listener for window resize\n//     window.addEventListener('resize', () => {\n//       camera.aspect = window.innerWidth / window.innerHeight;\n//       camera.updateProjectionMatrix();\n//       renderer.setSize(window.innerWidth, window.innerHeight);\n//     });\n\n//     // Animation function\n//     function animate() {\n//       requestAnimationFrame(animate);\n//       renderer.render(scene, camera);\n//     }\n\n//     animate();\n\n//     // Handle key press event\n//     document.addEventListener('keydown', (event) => {\n//       if (event.code === 'ArrowRight') {\n//         moveElements(-3);\n//       } else if (event.code === 'ArrowLeft') {\n//         moveElements(3);\n//       }\n//     });\n\n//     // Function to move elements\n//     function moveElements(xDistance) {\n//       // Move background elements\n//       flowers.forEach(flower => {\n//         flower.flowerStem.position.x -= xDistance;\n//         flower.flowerPetal.position.x -= xDistance;\n//       });\n//       clouds.forEach(cloud => {\n//         cloud.position.x -= xDistance;\n//       });\n//       textMeshes.forEach(textMesh => {\n//         textMesh.position.x -= xDistance;\n//       });\n//       schools.forEach(school => {\n//         school.position.x -= xDistance;\n//       });\n//       logos.forEach(logo => {\n//         logo.position.x -= xDistance;\n//       });\n\n//       // Change the shape of the cube\n//       cube.scale.x = 1 + Math.sin(xDistance) * 0.1;\n//       cube.scale.y = 1 + Math.cos(xDistance) * 0.1;\n//       cube.scale.z = 1 + Math.sin(xDistance) * 0.1;\n//     }\n\n//     // Cleanup\n//     return () => {\n//       // Clean up Three.js objects\n//       scene.remove(cube);\n//       flowers.forEach(flower => {\n//         scene.remove(flower.flowerStem);\n//         scene.remove(flower.flowerPetal);\n//       });\n//       clouds.forEach(cloud => {\n//         scene.remove(cloud);\n//       });\n//       textMeshes.forEach(textMesh => {\n//         scene.remove(textMesh);\n//       });\n//       schools.forEach(school => {\n//         scene.remove(school);\n//       });\n//       logos.forEach(logo => {\n//         scene.remove(logo);\n//       });\n\n//       // Dispose renderer\n//       renderer.dispose();\n//       containerRef.current.removeChild(renderer.domElement);\n//     };\n//   }, []); // Empty dependency array ensures useEffect runs only once\n\n//   return <div ref={containerRef} />;\n// };\n\n// export default App;\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const renderer = useRef(null);\n  const cube = useRef(null);\n  const controls = useRef(null);\n  useEffect(() => {\n    // Initialize Three.js scene\n    const initScene = () => {\n      // Scene, camera, renderer setup\n      scene.current = new THREE.Scene();\n      camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer.current = new THREE.WebGLRenderer();\n      renderer.current.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.current.domElement);\n\n      // Cube setup\n      const geometry = new THREE.BoxGeometry();\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      cube.current = new THREE.Mesh(geometry, material);\n      scene.current.add(cube.current);\n\n      // Orbit controls setup\n      controls.current = new OrbitControls(camera.current, renderer.current.domElement);\n      controls.current.enableDamping = true;\n      controls.current.dampingFactor = 0.25;\n      controls.current.screenSpacePanning = false;\n      controls.current.maxPolarAngle = Math.PI / 2;\n\n      // Set initial camera position\n      camera.current.position.z = 5;\n\n      // Create elements\n      createFlowers();\n      createClouds();\n      createText();\n      createSchools();\n      createSun();\n\n      // Start animation loop\n      animate();\n    };\n\n    // Create flowers\n    const createFlowers = () => {\n      const flowers = [];\n      function createFlower(x, y, z) {\n        const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n        const flowerMaterial = new THREE.MeshBasicMaterial({\n          color: 0x8B4513\n        });\n        const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n        const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n        const flowerPetalMaterial = new THREE.MeshBasicMaterial({\n          color: 0xFF69B4\n        });\n        const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n        flowerStem.position.set(x, y, z);\n        flowerPetal.position.set(x, y + 0.6, z);\n        scene.current.add(flowerStem);\n        scene.current.add(flowerPetal);\n        flowers.push(flowerStem, flowerPetal);\n      }\n\n      // Example positions\n      createFlower(-2, 0, -5);\n      createFlower(0, 0, -5);\n      createFlower(2, 0, -5);\n    };\n\n    // Create clouds\n    const createClouds = () => {\n      const clouds = [];\n      function createCloud(x, y, z) {\n        const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const cloudMaterial = new THREE.MeshBasicMaterial({\n          color: 0xFFFFFF\n        });\n        const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n        cloud.position.set(x, y, z);\n        scene.current.add(cloud);\n        clouds.push(cloud);\n      }\n\n      // Example positions\n      createCloud(-5, 2, -10);\n      createCloud(0, 3, -10);\n      createCloud(5, 2, -10);\n    };\n\n    // Create text labels\n    const createText = () => {\n      const loader = new THREE.FontLoader();\n      loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n        const createTextMesh = (text, x, y, z, size, color) => {\n          const textGeometry = new THREE.TextGeometry(text, {\n            font: font,\n            size: size,\n            height: 0.1,\n            curveSegments: 2,\n            bevelEnabled: false\n          });\n          const textMaterial = new THREE.MeshBasicMaterial({\n            color: color\n          });\n          const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n          textMesh.position.set(x, y, z);\n          scene.current.add(textMesh);\n        };\n\n        // Example text labels\n        // createTextMesh('Welcome to Three.js', -6, 5, -5, 1, 0xffffff);\n        // createTextMesh('Hello, I am Swati', -4.3, 2, -5, 1, 0xffffff);\n        // createTextMesh('A passionate developer and tech enthusiast', -6.4, -3, -5, 0.5, 0xffffff);\n        // createTextMesh('Let\\'s move forward...', -3, -4.2, -5, 0.5, 0xffffff);\n      });\n    };\n\n    // Create schools/buildings\n    const createSchools = () => {\n      const schools = [];\n      function createSchool(x, y, z) {\n        // Function to create a building\n        function createBuilding(xOffset, yOffset, zOffset) {\n          const building = new THREE.Group();\n\n          // Create the walls\n          const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n          const wallMaterial = new THREE.MeshBasicMaterial({\n            color: 0xffffff\n          }); // White color\n          const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n          walls.position.set(xOffset, yOffset, zOffset);\n\n          // Create windows\n          const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n          const windowMaterial = new THREE.MeshBasicMaterial({\n            color: 0x444444\n          });\n          const windows = [{\n            x: -1,\n            y: 0.8,\n            z: 1.01\n          }, {\n            x: 0,\n            y: 0.8,\n            z: 1.01\n          }, {\n            x: 1,\n            y: 0.8,\n            z: 1.01\n          }, {\n            x: -1,\n            y: -1,\n            z: 1.01\n          }, {\n            x: 0,\n            y: -1,\n            z: 1.01\n          }, {\n            x: 1,\n            y: -1,\n            z: 1.01\n          }, {\n            x: -2,\n            y: 0.8,\n            z: 1.01\n          }, {\n            x: -2,\n            y: -1,\n            z: 1.01\n          }, {\n            x: 2,\n            y: 0.8,\n            z: 1.01\n          }, {\n            x: 2,\n            y: -1,\n            z: 1.01\n          }];\n          windows.forEach(pos => {\n            const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n            windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n            building.add(windowMesh);\n          });\n\n          // Create horizontal strips\n          const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n          const stripMaterial = new THREE.MeshBasicMaterial({\n            color: 0x04192\n          });\n          const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n          strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n          const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n          strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n          // Add components to the building group\n          building.add(walls);\n          building.add(strip1);\n          building.add(strip2);\n          return building;\n        }\n\n        // Create two buildings\n        const building1 = createBuilding(x, y, z);\n        const building2 = createBuilding(x + 10, y, z);\n\n        // Add the buildings to the scene\n        scene.current.add(building1);\n        scene.current.add(building2);\n        schools.push(building1, building2);\n      }\n\n      // Example position\n      createSchool(25, -3, -5);\n    };\n\n    // Create sun\n    const createSun = () => {\n      const sunGroup = new THREE.Group();\n\n      // Create the sun (half circle)\n      const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n      const sunMaterial = new THREE.MeshBasicMaterial({\n        color: 0xFFFF00\n      }); // Yellow color\n      const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n      sun.position.set(34.5, -2, -5);\n      sunGroup.add(sun);\n\n      // Create rays\n      const rayMaterial = new THREE.LineBasicMaterial({\n        color: 0xd34000\n      }); // Yellow color\n\n      for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n        const rayGeometry = new THREE.BufferGeometry();\n        const vertices = new Float32Array([Math.cos(i) * 2, Math.sin(i) * 2, -5, Math.cos(i) * 3, Math.sin(i) * 3, -5]);\n        rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        const ray = new THREE.Line(rayGeometry, rayMaterial);\n        sunGroup.add(ray);\n      }\n\n      // Add the sunGroup to the scene\n      scene.current.add(sunGroup);\n    };\n\n    // Animation function\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Update orbit controls\n      controls.current.update();\n\n      // Perform any other animations or updates\n      cube.current.rotation.x += 0.01;\n      cube.current.rotation.y += 0.01;\n\n      // Render scene\n      renderer.current.render(scene.current, camera.current);\n    };\n\n    // Initialize scene when component mounts\n    initScene();\n\n    // Clean up Three.js scene when component unmounts\n    return () => {\n      // Dispose Three.js objects, remove event listeners, etc.\n      scene.current = null;\n      camera.current = null;\n      renderer.current = null;\n      cube.current = null;\n      if (controls.current) {\n        controls.current.dispose();\n        controls.current = null;\n      }\n    };\n  }, []);\n\n  // Resize handling\n  useEffect(() => {\n    const handleResize = () => {\n      camera.current.aspect = window.innerWidth / window.innerHeight;\n      camera.current.updateProjectionMatrix();\n      renderer.current.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(ThreeScene, \"xAL3CNiIUHpfbwM6C+EhU/DqtEU=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","Fragment","_Fragment","jsxDEV","_jsxDEV","ThreeScene","_s","scene","camera","renderer","cube","controls","initScene","current","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","add","enableDamping","dampingFactor","screenSpacePanning","maxPolarAngle","Math","PI","position","z","createFlowers","createClouds","createText","createSchools","createSun","animate","flowers","createFlower","x","y","flowerGeometry","CylinderGeometry","flowerMaterial","flowerStem","flowerPetalGeometry","SphereGeometry","flowerPetalMaterial","flowerPetal","set","push","clouds","createCloud","cloudGeometry","cloudMaterial","cloud","loader","FontLoader","load","font","createTextMesh","text","size","textGeometry","TextGeometry","height","curveSegments","bevelEnabled","textMaterial","textMesh","schools","createSchool","createBuilding","xOffset","yOffset","zOffset","building","Group","wallGeometry","wallMaterial","walls","windowGeometry","windowMaterial","windows","forEach","pos","windowMesh","stripGeometry","stripMaterial","strip1","strip2","building1","building2","sunGroup","sunGeometry","CircleGeometry","sunMaterial","sun","rayMaterial","LineBasicMaterial","i","rayGeometry","BufferGeometry","vertices","Float32Array","cos","sin","setAttribute","BufferAttribute","ray","Line","requestAnimationFrame","update","rotation","render","dispose","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","_c","$RefreshReg$"],"sources":["/Users/swati/Documents/Portfoilo/reactthree/src/components/app.js"],"sourcesContent":["// import React, {useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import '../styles/app.css';\n\n// const App = () => {\n//   const containerRef = useRef(null);\n//   let scene, camera, renderer;\n//   const flowers = [];\n//   const clouds = [];\n//   const textMeshes = [];\n//   const schools = [];\n//   const logos = [];\n\n//   useEffect(() => {\n//     // Scene\n//     scene = new THREE.Scene();\n\n//     // Camera\n//     camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//     camera.position.z = 5;\n//     // camera.position.x =25;\n//     // Renderer\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     containerRef.current.appendChild(renderer.domElement);\n\n//     // Create a cube\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // Create flowers\n//     // function createFlower(x, y, z) {\n//     //   const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n//     //   const flowerMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\n//     //   const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n\n//     //   const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n//     //   const flowerPetalMaterial = new THREE.MeshBasicMaterial({ color: 0xFF69B4 });\n//     //   const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n\n//     //   flowerStem.position.set(x, y, z);\n//     //   flowerPetal.position.set(x, y + 0.6, z);\n\n//     //   scene.add(flowerStem);\n//     //   scene.add(flowerPetal);\n\n//     //   flowers.push({ flowerStem, flowerPetal });\n//     // }\n\n//     // Create clouds\n//     // function createCloud(x, y, z) {\n//     //   const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n//     //   const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n//     //   const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n//     //   cloud.position.set(x, y, z);\n//     //   scene.add(cloud);\n\n//     //   clouds.push(cloud);\n//     // }\n\n//     // Create text labels\n//     function createText(x, y, z, text, size, color, url) {\n//       const loader = new THREE.FontLoader();\n//       loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n//         const textGeometry = new THREE.TextGeometry(text, {\n//           font: font,\n//           size: size,\n//           height: 0.1,\n//           curveSegments: 2,\n//           bevelEnabled: false\n//         });\n//         const textMaterial = new THREE.MeshBasicMaterial({ color: color });\n//         const mesh = new THREE.Mesh(textGeometry, textMaterial);\n//         mesh.position.set(x, y, z);\n//         mesh.castShadow = true;\n//         mesh.userData.url = url;\n//         scene.add(mesh);\n//         textMeshes.push(mesh);\n//       });\n//     }\n\n//     // Create school buildings\n//     function createSchool(x, y, z) {\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: +2, y: 0.8, z: 1.01 },\n//           { x: +2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 1, y, z * 2);\n\n//       scene.add(building1);\n//       scene.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Create sun with rays\n//     function createSun(x, y, z) {\n//       const sunGroup = new THREE.Group();\n\n//       const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//       const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });\n//       const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//       sun.position.set(x, y, z);\n//       sunGroup.add(sun);\n\n//       const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 });\n\n//       for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//         const rayGeometry = new THREE.BufferGeometry();\n//         const vertices = new Float32Array([\n//           x + Math.cos(i) * 2, y + Math.sin(i) * 2, z,\n//           x + Math.cos(i) * 3, y + Math.sin(i) * 3, z\n//         ]);\n//         rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//         const ray = new THREE.Line(rayGeometry, rayMaterial);\n//         sunGroup.add(ray);\n//       }\n\n//       scene.add(sunGroup);\n//       logos.push(sunGroup);\n//     }\n\n//     // Initial setup\n//     // createText(-5.5, 5, -5, \"Welcome to O-rang\", 1, 0xffffff);\n//     // createText(-4.3, 2, -5, \"Hello I am Swati\", 1, 0xffffff);\n//     // createText(-6.4, -3, -5, \"A passionate developer and tech enthusiast\", 0.5, 0xffffff);\n//     // createText(-3, -4.2, -5, \"Let's move forward . .\", 0.5, 0xffffff);\n\n//     createSchool(25, -3, -5);\n//     // createText(30, -3, -5, \"Kendriya Vidyalaya Gorakhpur\", 0.5, 0x7B0000, \"/school\");\n//     createSun(34.5, -2, -5);\n\n//     // Event listener for window resize\n//     window.addEventListener('resize', () => {\n//       camera.aspect = window.innerWidth / window.innerHeight;\n//       camera.updateProjectionMatrix();\n//       renderer.setSize(window.innerWidth, window.innerHeight);\n//     });\n\n//     // Animation function\n//     function animate() {\n//       requestAnimationFrame(animate);\n//       renderer.render(scene, camera);\n//     }\n\n//     animate();\n\n//     // Handle key press event\n//     document.addEventListener('keydown', (event) => {\n//       if (event.code === 'ArrowRight') {\n//         moveElements(-3);\n//       } else if (event.code === 'ArrowLeft') {\n//         moveElements(3);\n//       }\n//     });\n\n//     // Function to move elements\n//     function moveElements(xDistance) {\n//       // Move background elements\n//       flowers.forEach(flower => {\n//         flower.flowerStem.position.x -= xDistance;\n//         flower.flowerPetal.position.x -= xDistance;\n//       });\n//       clouds.forEach(cloud => {\n//         cloud.position.x -= xDistance;\n//       });\n//       textMeshes.forEach(textMesh => {\n//         textMesh.position.x -= xDistance;\n//       });\n//       schools.forEach(school => {\n//         school.position.x -= xDistance;\n//       });\n//       logos.forEach(logo => {\n//         logo.position.x -= xDistance;\n//       });\n\n//       // Change the shape of the cube\n//       cube.scale.x = 1 + Math.sin(xDistance) * 0.1;\n//       cube.scale.y = 1 + Math.cos(xDistance) * 0.1;\n//       cube.scale.z = 1 + Math.sin(xDistance) * 0.1;\n//     }\n\n//     // Cleanup\n//     return () => {\n//       // Clean up Three.js objects\n//       scene.remove(cube);\n//       flowers.forEach(flower => {\n//         scene.remove(flower.flowerStem);\n//         scene.remove(flower.flowerPetal);\n//       });\n//       clouds.forEach(cloud => {\n//         scene.remove(cloud);\n//       });\n//       textMeshes.forEach(textMesh => {\n//         scene.remove(textMesh);\n//       });\n//       schools.forEach(school => {\n//         scene.remove(school);\n//       });\n//       logos.forEach(logo => {\n//         scene.remove(logo);\n//       });\n\n//       // Dispose renderer\n//       renderer.dispose();\n//       containerRef.current.removeChild(renderer.domElement);\n//     };\n//   }, []); // Empty dependency array ensures useEffect runs only once\n\n//   return <div ref={containerRef} />;\n// };\n\n// export default App;\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst ThreeScene = () => {\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const renderer = useRef(null);\n  const cube = useRef(null);\n  const controls = useRef(null);\n\n  useEffect(() => {\n    // Initialize Three.js scene\n    const initScene = () => {\n      // Scene, camera, renderer setup\n      scene.current = new THREE.Scene();\n      camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer.current = new THREE.WebGLRenderer();\n      renderer.current.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.current.domElement);\n\n      // Cube setup\n      const geometry = new THREE.BoxGeometry();\n      const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n      cube.current = new THREE.Mesh(geometry, material);\n      scene.current.add(cube.current);\n\n      // Orbit controls setup\n      controls.current = new OrbitControls(camera.current, renderer.current.domElement);\n      controls.current.enableDamping = true;\n      controls.current.dampingFactor = 0.25;\n      controls.current.screenSpacePanning = false;\n      controls.current.maxPolarAngle = Math.PI / 2;\n\n      // Set initial camera position\n      camera.current.position.z = 5;\n\n      // Create elements\n      createFlowers();\n      createClouds();\n      createText();\n      createSchools();\n      createSun();\n\n      // Start animation loop\n      animate();\n    };\n\n    // Create flowers\n    const createFlowers = () => {\n      const flowers = [];\n\n      function createFlower(x, y, z) {\n        const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n        const flowerMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\n        const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n\n        const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n        const flowerPetalMaterial = new THREE.MeshBasicMaterial({ color: 0xFF69B4 });\n        const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n\n        flowerStem.position.set(x, y, z);\n        flowerPetal.position.set(x, y + 0.6, z);\n\n        scene.current.add(flowerStem);\n        scene.current.add(flowerPetal);\n\n        flowers.push(flowerStem, flowerPetal);\n      }\n\n      // Example positions\n      createFlower(-2, 0, -5);\n      createFlower(0, 0, -5);\n      createFlower(2, 0, -5);\n    };\n\n    // Create clouds\n    const createClouds = () => {\n      const clouds = [];\n\n      function createCloud(x, y, z) {\n        const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n        const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n        cloud.position.set(x, y, z);\n        scene.current.add(cloud);\n\n        clouds.push(cloud);\n      }\n\n      // Example positions\n      createCloud(-5, 2, -10);\n      createCloud(0, 3, -10);\n      createCloud(5, 2, -10);\n    };\n\n    // Create text labels\n    const createText = () => {\n      const loader = new THREE.FontLoader();\n      loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n        const createTextMesh = (text, x, y, z, size, color) => {\n          const textGeometry = new THREE.TextGeometry(text, {\n            font: font,\n            size: size,\n            height: 0.1,\n            curveSegments: 2,\n            bevelEnabled: false\n          });\n          const textMaterial = new THREE.MeshBasicMaterial({ color: color });\n          const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n          textMesh.position.set(x, y, z);\n          scene.current.add(textMesh);\n        };\n\n        // Example text labels\n        // createTextMesh('Welcome to Three.js', -6, 5, -5, 1, 0xffffff);\n        // createTextMesh('Hello, I am Swati', -4.3, 2, -5, 1, 0xffffff);\n        // createTextMesh('A passionate developer and tech enthusiast', -6.4, -3, -5, 0.5, 0xffffff);\n        // createTextMesh('Let\\'s move forward...', -3, -4.2, -5, 0.5, 0xffffff);\n      });\n    };\n\n    // Create schools/buildings\n    const createSchools = () => {\n      const schools = [];\n\n      function createSchool(x, y, z) {\n        // Function to create a building\n        function createBuilding(xOffset, yOffset, zOffset) {\n          const building = new THREE.Group();\n\n          // Create the walls\n          const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n          const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff }); // White color\n          const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n          walls.position.set(xOffset, yOffset, zOffset);\n\n          // Create windows\n          const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n          const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n          const windows = [\n            { x: -1, y: 0.8, z: 1.01 },\n            { x: 0, y: 0.8, z: 1.01 },\n            { x: 1, y: 0.8, z: 1.01 },\n            { x: -1, y: -1, z: 1.01 },\n            { x: 0, y: -1, z: 1.01 },\n            { x: 1, y: -1, z: 1.01 },\n            { x: -2, y: 0.8, z: 1.01 },\n            { x: -2, y: -1, z: 1.01 },\n            { x: 2, y: 0.8, z: 1.01 },\n            { x: 2, y: -1, z: 1.01 },\n          ];\n\n          windows.forEach((pos) => {\n            const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n            windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n            building.add(windowMesh);\n          });\n\n          // Create horizontal strips\n          const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n          const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n          const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n          strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n          const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n          strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n          // Add components to the building group\n          building.add(walls);\n          building.add(strip1);\n          building.add(strip2);\n\n          return building;\n        }\n\n        // Create two buildings\n        const building1 = createBuilding(x, y, z);\n        const building2 = createBuilding(x + 10, y, z);\n\n        // Add the buildings to the scene\n        scene.current.add(building1);\n        scene.current.add(building2);\n\n        schools.push(building1, building2);\n      }\n\n      // Example position\n      createSchool(25, -3, -5);\n    };\n\n    // Create sun\n    const createSun = () => {\n      const sunGroup = new THREE.Group();\n\n      // Create the sun (half circle)\n      const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n      const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 }); // Yellow color\n      const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n      sun.position.set(34.5, -2, -5);\n      sunGroup.add(sun);\n\n      // Create rays\n      const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 }); // Yellow color\n\n      for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n        const rayGeometry = new THREE.BufferGeometry();\n        const vertices = new Float32Array([\n          Math.cos(i) * 2, Math.sin(i) * 2, -5,\n          Math.cos(i) * 3, Math.sin(i) * 3, -5\n        ]);\n        rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        const ray = new THREE.Line(rayGeometry, rayMaterial);\n        sunGroup.add(ray);\n      }\n\n      // Add the sunGroup to the scene\n      scene.current.add(sunGroup);\n    };\n\n    // Animation function\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Update orbit controls\n      controls.current.update();\n\n      // Perform any other animations or updates\n      cube.current.rotation.x += 0.01;\n      cube.current.rotation.y += 0.01;\n\n      // Render scene\n      renderer.current.render(scene.current, camera.current);\n    };\n\n    // Initialize scene when component mounts\n    initScene();\n\n    // Clean up Three.js scene when component unmounts\n    return () => {\n      // Dispose Three.js objects, remove event listeners, etc.\n      scene.current = null;\n      camera.current = null;\n      renderer.current = null;\n      cube.current = null;\n      if (controls.current) {\n        controls.current.dispose();\n        controls.current = null;\n      }\n    };\n  }, []);\n\n  // Resize handling\n  useEffect(() => {\n    const handleResize = () => {\n      camera.current.aspect = window.innerWidth / window.innerHeight;\n      camera.current.updateProjectionMatrix();\n      renderer.current.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return <></>;\n};\n\nexport default ThreeScene;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,KAAK,MAAM,OA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}