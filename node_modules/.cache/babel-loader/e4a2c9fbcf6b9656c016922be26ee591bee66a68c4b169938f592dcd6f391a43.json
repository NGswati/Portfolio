{"ast":null,"code":"// import React, {useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import '../styles/app.css';\n\n// const App = () => {\n//   const containerRef = useRef(null);\n//   let scene, camera, renderer;\n//   const flowers = [];\n//   const clouds = [];\n//   const textMeshes = [];\n//   const schools = [];\n//   const logos = [];\n\n//   useEffect(() => {\n//     // Scene\n//     scene = new THREE.Scene();\n\n//     // Camera\n//     camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//     camera.position.z = 5;\n//     // camera.position.x =25;\n//     // Renderer\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     containerRef.current.appendChild(renderer.domElement);\n\n//     // Create a cube\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // Create flowers\n//     // function createFlower(x, y, z) {\n//     //   const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n//     //   const flowerMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\n//     //   const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n\n//     //   const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n//     //   const flowerPetalMaterial = new THREE.MeshBasicMaterial({ color: 0xFF69B4 });\n//     //   const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n\n//     //   flowerStem.position.set(x, y, z);\n//     //   flowerPetal.position.set(x, y + 0.6, z);\n\n//     //   scene.add(flowerStem);\n//     //   scene.add(flowerPetal);\n\n//     //   flowers.push({ flowerStem, flowerPetal });\n//     // }\n\n//     // Create clouds\n//     // function createCloud(x, y, z) {\n//     //   const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n//     //   const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n//     //   const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n//     //   cloud.position.set(x, y, z);\n//     //   scene.add(cloud);\n\n//     //   clouds.push(cloud);\n//     // }\n\n//     // Create text labels\n//     function createText(x, y, z, text, size, color, url) {\n//       const loader = new THREE.FontLoader();\n//       loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n//         const textGeometry = new THREE.TextGeometry(text, {\n//           font: font,\n//           size: size,\n//           height: 0.1,\n//           curveSegments: 2,\n//           bevelEnabled: false\n//         });\n//         const textMaterial = new THREE.MeshBasicMaterial({ color: color });\n//         const mesh = new THREE.Mesh(textGeometry, textMaterial);\n//         mesh.position.set(x, y, z);\n//         mesh.castShadow = true;\n//         mesh.userData.url = url;\n//         scene.add(mesh);\n//         textMeshes.push(mesh);\n//       });\n//     }\n\n//     // Create school buildings\n//     function createSchool(x, y, z) {\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: +2, y: 0.8, z: 1.01 },\n//           { x: +2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 1, y, z * 2);\n\n//       scene.add(building1);\n//       scene.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Create sun with rays\n//     function createSun(x, y, z) {\n//       const sunGroup = new THREE.Group();\n\n//       const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//       const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });\n//       const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//       sun.position.set(x, y, z);\n//       sunGroup.add(sun);\n\n//       const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 });\n\n//       for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//         const rayGeometry = new THREE.BufferGeometry();\n//         const vertices = new Float32Array([\n//           x + Math.cos(i) * 2, y + Math.sin(i) * 2, z,\n//           x + Math.cos(i) * 3, y + Math.sin(i) * 3, z\n//         ]);\n//         rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//         const ray = new THREE.Line(rayGeometry, rayMaterial);\n//         sunGroup.add(ray);\n//       }\n\n//       scene.add(sunGroup);\n//       logos.push(sunGroup);\n//     }\n\n//     // Initial setup\n//     // createText(-5.5, 5, -5, \"Welcome to O-rang\", 1, 0xffffff);\n//     // createText(-4.3, 2, -5, \"Hello I am Swati\", 1, 0xffffff);\n//     // createText(-6.4, -3, -5, \"A passionate developer and tech enthusiast\", 0.5, 0xffffff);\n//     // createText(-3, -4.2, -5, \"Let's move forward . .\", 0.5, 0xffffff);\n\n//     createSchool(25, -3, -5);\n//     // createText(30, -3, -5, \"Kendriya Vidyalaya Gorakhpur\", 0.5, 0x7B0000, \"/school\");\n//     createSun(34.5, -2, -5);\n\n//     // Event listener for window resize\n//     window.addEventListener('resize', () => {\n//       camera.aspect = window.innerWidth / window.innerHeight;\n//       camera.updateProjectionMatrix();\n//       renderer.setSize(window.innerWidth, window.innerHeight);\n//     });\n\n//     // Animation function\n//     function animate() {\n//       requestAnimationFrame(animate);\n//       renderer.render(scene, camera);\n//     }\n\n//     animate();\n\n//     // Handle key press event\n//     document.addEventListener('keydown', (event) => {\n//       if (event.code === 'ArrowRight') {\n//         moveElements(-3);\n//       } else if (event.code === 'ArrowLeft') {\n//         moveElements(3);\n//       }\n//     });\n\n//     // Function to move elements\n//     function moveElements(xDistance) {\n//       // Move background elements\n//       flowers.forEach(flower => {\n//         flower.flowerStem.position.x -= xDistance;\n//         flower.flowerPetal.position.x -= xDistance;\n//       });\n//       clouds.forEach(cloud => {\n//         cloud.position.x -= xDistance;\n//       });\n//       textMeshes.forEach(textMesh => {\n//         textMesh.position.x -= xDistance;\n//       });\n//       schools.forEach(school => {\n//         school.position.x -= xDistance;\n//       });\n//       logos.forEach(logo => {\n//         logo.position.x -= xDistance;\n//       });\n\n//       // Change the shape of the cube\n//       cube.scale.x = 1 + Math.sin(xDistance) * 0.1;\n//       cube.scale.y = 1 + Math.cos(xDistance) * 0.1;\n//       cube.scale.z = 1 + Math.sin(xDistance) * 0.1;\n//     }\n\n//     // Cleanup\n//     return () => {\n//       // Clean up Three.js objects\n//       scene.remove(cube);\n//       flowers.forEach(flower => {\n//         scene.remove(flower.flowerStem);\n//         scene.remove(flower.flowerPetal);\n//       });\n//       clouds.forEach(cloud => {\n//         scene.remove(cloud);\n//       });\n//       textMeshes.forEach(textMesh => {\n//         scene.remove(textMesh);\n//       });\n//       schools.forEach(school => {\n//         scene.remove(school);\n//       });\n//       logos.forEach(logo => {\n//         scene.remove(logo);\n//       });\n\n//       // Dispose renderer\n//       renderer.dispose();\n//       containerRef.current.removeChild(renderer.domElement);\n//     };\n//   }, []); // Empty dependency array ensures useEffect runs only once\n\n//   return <div ref={containerRef} />;\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/swati/Documents/Portfoilo/reactthree/src/components/app.js"],"sourcesContent":["// import React, {useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import '../styles/app.css';\n\n// const App = () => {\n//   const containerRef = useRef(null);\n//   let scene, camera, renderer;\n//   const flowers = [];\n//   const clouds = [];\n//   const textMeshes = [];\n//   const schools = [];\n//   const logos = [];\n\n//   useEffect(() => {\n//     // Scene\n//     scene = new THREE.Scene();\n\n//     // Camera\n//     camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//     camera.position.z = 5;\n//     // camera.position.x =25;\n//     // Renderer\n//     renderer = new THREE.WebGLRenderer();\n//     renderer.setSize(window.innerWidth, window.innerHeight);\n//     containerRef.current.appendChild(renderer.domElement);\n\n//     // Create a cube\n//     const geometry = new THREE.BoxGeometry();\n//     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//     const cube = new THREE.Mesh(geometry, material);\n//     scene.add(cube);\n\n//     // Create flowers\n//     // function createFlower(x, y, z) {\n//     //   const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n//     //   const flowerMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\n//     //   const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n\n//     //   const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n//     //   const flowerPetalMaterial = new THREE.MeshBasicMaterial({ color: 0xFF69B4 });\n//     //   const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n\n//     //   flowerStem.position.set(x, y, z);\n//     //   flowerPetal.position.set(x, y + 0.6, z);\n\n//     //   scene.add(flowerStem);\n//     //   scene.add(flowerPetal);\n\n//     //   flowers.push({ flowerStem, flowerPetal });\n//     // }\n\n//     // Create clouds\n//     // function createCloud(x, y, z) {\n//     //   const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n//     //   const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n//     //   const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n//     //   cloud.position.set(x, y, z);\n//     //   scene.add(cloud);\n\n//     //   clouds.push(cloud);\n//     // }\n\n//     // Create text labels\n//     function createText(x, y, z, text, size, color, url) {\n//       const loader = new THREE.FontLoader();\n//       loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n//         const textGeometry = new THREE.TextGeometry(text, {\n//           font: font,\n//           size: size,\n//           height: 0.1,\n//           curveSegments: 2,\n//           bevelEnabled: false\n//         });\n//         const textMaterial = new THREE.MeshBasicMaterial({ color: color });\n//         const mesh = new THREE.Mesh(textGeometry, textMaterial);\n//         mesh.position.set(x, y, z);\n//         mesh.castShadow = true;\n//         mesh.userData.url = url;\n//         scene.add(mesh);\n//         textMeshes.push(mesh);\n//       });\n//     }\n\n//     // Create school buildings\n//     function createSchool(x, y, z) {\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: +2, y: 0.8, z: 1.01 },\n//           { x: +2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 1, y, z * 2);\n\n//       scene.add(building1);\n//       scene.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Create sun with rays\n//     function createSun(x, y, z) {\n//       const sunGroup = new THREE.Group();\n\n//       const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//       const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });\n//       const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//       sun.position.set(x, y, z);\n//       sunGroup.add(sun);\n\n//       const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 });\n\n//       for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//         const rayGeometry = new THREE.BufferGeometry();\n//         const vertices = new Float32Array([\n//           x + Math.cos(i) * 2, y + Math.sin(i) * 2, z,\n//           x + Math.cos(i) * 3, y + Math.sin(i) * 3, z\n//         ]);\n//         rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//         const ray = new THREE.Line(rayGeometry, rayMaterial);\n//         sunGroup.add(ray);\n//       }\n\n//       scene.add(sunGroup);\n//       logos.push(sunGroup);\n//     }\n\n//     // Initial setup\n//     // createText(-5.5, 5, -5, \"Welcome to O-rang\", 1, 0xffffff);\n//     // createText(-4.3, 2, -5, \"Hello I am Swati\", 1, 0xffffff);\n//     // createText(-6.4, -3, -5, \"A passionate developer and tech enthusiast\", 0.5, 0xffffff);\n//     // createText(-3, -4.2, -5, \"Let's move forward . .\", 0.5, 0xffffff);\n\n//     createSchool(25, -3, -5);\n//     // createText(30, -3, -5, \"Kendriya Vidyalaya Gorakhpur\", 0.5, 0x7B0000, \"/school\");\n//     createSun(34.5, -2, -5);\n\n//     // Event listener for window resize\n//     window.addEventListener('resize', () => {\n//       camera.aspect = window.innerWidth / window.innerHeight;\n//       camera.updateProjectionMatrix();\n//       renderer.setSize(window.innerWidth, window.innerHeight);\n//     });\n\n//     // Animation function\n//     function animate() {\n//       requestAnimationFrame(animate);\n//       renderer.render(scene, camera);\n//     }\n\n//     animate();\n\n//     // Handle key press event\n//     document.addEventListener('keydown', (event) => {\n//       if (event.code === 'ArrowRight') {\n//         moveElements(-3);\n//       } else if (event.code === 'ArrowLeft') {\n//         moveElements(3);\n//       }\n//     });\n\n//     // Function to move elements\n//     function moveElements(xDistance) {\n//       // Move background elements\n//       flowers.forEach(flower => {\n//         flower.flowerStem.position.x -= xDistance;\n//         flower.flowerPetal.position.x -= xDistance;\n//       });\n//       clouds.forEach(cloud => {\n//         cloud.position.x -= xDistance;\n//       });\n//       textMeshes.forEach(textMesh => {\n//         textMesh.position.x -= xDistance;\n//       });\n//       schools.forEach(school => {\n//         school.position.x -= xDistance;\n//       });\n//       logos.forEach(logo => {\n//         logo.position.x -= xDistance;\n//       });\n\n//       // Change the shape of the cube\n//       cube.scale.x = 1 + Math.sin(xDistance) * 0.1;\n//       cube.scale.y = 1 + Math.cos(xDistance) * 0.1;\n//       cube.scale.z = 1 + Math.sin(xDistance) * 0.1;\n//     }\n\n//     // Cleanup\n//     return () => {\n//       // Clean up Three.js objects\n//       scene.remove(cube);\n//       flowers.forEach(flower => {\n//         scene.remove(flower.flowerStem);\n//         scene.remove(flower.flowerPetal);\n//       });\n//       clouds.forEach(cloud => {\n//         scene.remove(cloud);\n//       });\n//       textMeshes.forEach(textMesh => {\n//         scene.remove(textMesh);\n//       });\n//       schools.forEach(school => {\n//         scene.remove(school);\n//       });\n//       logos.forEach(logo => {\n//         scene.remove(logo);\n//       });\n\n//       // Dispose renderer\n//       renderer.dispose();\n//       containerRef.current.removeChild(renderer.domElement);\n//     };\n//   }, []); // Empty dependency array ensures useEffect runs only once\n\n//   return <div ref={containerRef} />;\n// };\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}