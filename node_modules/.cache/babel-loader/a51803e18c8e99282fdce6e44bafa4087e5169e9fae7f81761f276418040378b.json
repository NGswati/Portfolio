{"ast":null,"code":"var _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nconst ThreeScene = () => {\n  _s();\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const renderer = useRef(null);\n  const cube = useRef(null);\n  const controls = useRef(null);\n  const notesDiv = useRef(null);\n  const checkpoints = [0, 5, 8, 12, 30, 33];\n  const notes = [\"Checkpoint 1: Move the right arrow key!\", \"1\", \"2\", \"3\", \"Checkpoint 2: Done Schooling from kendriya vidyalaya Sangathan, with lots of happy memories and Friends!\", \"Click to Enter in the school!\"];\n  let checkpointIndex = 0;\n  let xMovement = 0;\n  const xdistance = 3;\n  const flowers = [];\n  const clouds = [];\n  const textMeshes = [];\n  const schools = [];\n  useEffect(() => {\n    const initScene = () => {\n      scene.current = new THREE.Scene();\n      camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer.current = new THREE.WebGLRenderer();\n      renderer.current.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.current.domElement);\n      const geometry = new THREE.BoxGeometry();\n      const material = new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      });\n      cube.current = new THREE.Mesh(geometry, material);\n      scene.current.add(cube.current);\n      controls.current = new OrbitControls(camera.current, renderer.current.domElement);\n      controls.current.enableDamping = true;\n      controls.current.dampingFactor = 0.25;\n      controls.current.screenSpacePanning = false;\n      controls.current.maxPolarAngle = Math.PI / 2;\n      camera.current.position.z = 5;\n      notesDiv.current = document.createElement('div');\n      notesDiv.current.style.position = 'absolute';\n      notesDiv.current.style.textAlign = 'center';\n      notesDiv.current.style.top = '30px';\n      notesDiv.current.style.padding = '10px';\n      notesDiv.current.style.border = '2px solid white';\n      notesDiv.current.style.backgroundColor = 'black';\n      notesDiv.current.style.zIndex = '1000';\n      document.body.appendChild(notesDiv.current);\n      document.addEventListener('mousedown', onDocumentMouseDown, false);\n      document.addEventListener('keydown', onKeyDown);\n      createFlowers();\n      createClouds();\n      createText();\n      createSchools();\n      createSun();\n    };\n    const animate = () => {\n      if (!scene.current || !camera.current || !renderer.current) {\n        return;\n      }\n      const animationId = requestAnimationFrame(animate);\n      if (controls.current) {\n        controls.current.update();\n      }\n      if (cube.current) {\n        cube.current.rotation.x += 0.01;\n        cube.current.rotation.y += 0.01;\n      }\n      renderer.current.render(scene.current, camera.current);\n      return () => {\n        cancelAnimationFrame(animationId);\n      };\n    };\n    const onKeyDown = event => {\n      if (event.code === 'ArrowRight') {\n        xMovement -= 3;\n        handleArrowRight();\n      } else if (event.code === 'ArrowLeft') {\n        xMovement += 3;\n        handleArrowLeft();\n      }\n    };\n    const handleArrowRight = () => {\n      if (cube.current) {\n        cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n        cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n        cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n      }\n      if (checkpointIndex < checkpoints.length && xMovement >= checkpoints[checkpointIndex]) {\n        displayCheckpointNote();\n        checkpointIndex++;\n      }\n      moveBackgroundElements(-xdistance);\n    };\n    const handleArrowLeft = () => {\n      if (cube.current) {\n        cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n        cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n        cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n      }\n      if (checkpointIndex > 0 && xMovement < checkpoints[checkpointIndex - 1] && checkpointIndex > 4) {\n        checkpointIndex--;\n        displayCheckpointNote();\n      }\n      moveBackgroundElements(xdistance);\n    };\n    const moveBackgroundElements = distance => {\n      flowers.forEach(flower => {\n        flower.position.x += distance;\n      });\n      clouds.forEach(cloud => {\n        cloud.position.x += distance;\n      });\n      textMeshes.forEach(textMesh => {\n        textMesh.position.x += distance;\n      });\n      schools.forEach(school => {\n        school.position.x += distance;\n      });\n    };\n    const displayCheckpointNote = () => {\n      if (notesDiv.current) {\n        notesDiv.current.innerText = notes[checkpointIndex];\n        notesDiv.current.style.display = 'block';\n        setTimeout(() => {\n          notesDiv.current.style.display = 'none';\n        }, 2000);\n      }\n    };\n    const onDocumentMouseDown = event => {\n      event.preventDefault();\n      const raycaster = new THREE.Raycaster();\n      const mouse = new THREE.Vector2();\n      mouse.x = event.clientX / window.innerWidth * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, camera.current);\n      const intersects = raycaster.intersectObjects(textMeshes);\n      if (intersects.length > 0) {\n        const intersectedObject = intersects[0].object;\n        if (intersectedObject.userData.url) {\n          window.open(intersectedObject.userData.url, '_blank');\n        }\n      }\n    };\n    const handleResize = () => {\n      if (camera.current && renderer.current) {\n        camera.current.aspect = window.innerWidth / window.innerHeight;\n        camera.current.updateProjectionMatrix();\n        renderer.current.setSize(window.innerWidth, window.innerHeight);\n      }\n    };\n    initScene();\n    const cleanupAnimation = animate();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      if (cleanupAnimation) {\n        cleanupAnimation();\n      }\n      if (controls.current) {\n        controls.current.dispose();\n      }\n      if (renderer.current) {\n        renderer.current.dispose();\n      }\n      if (scene.current) {\n        scene.current.clear();\n      }\n      if (renderer.current && renderer.current.domElement) {\n        document.body.removeChild(renderer.current.domElement);\n      }\n      if (notesDiv.current) {\n        document.body.removeChild(notesDiv.current);\n      }\n      document.removeEventListener('mousedown', onDocumentMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Function to create flowers\n  const createFlowers = () => {\n    function createFlower(x, y, z) {\n      const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n      const flowerMaterial = new THREE.MeshBasicMaterial({\n        color: 0x8B4513\n      });\n      const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n      const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n      const flowerPetalMaterial = new THREE.MeshBasicMaterial({\n        color: 0xFF69B4\n      });\n      const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n      flowerStem.position.set(x, y, z);\n      flowerPetal.position.set(x, y + 0.6, z);\n      scene.current.add(flowerStem);\n      scene.current.add(flowerPetal);\n      flowers.push(flowerStem, flowerPetal);\n    }\n\n    // Example positions\n    // createFlower(-2, 0, -5);\n    // createFlower(0, 0, -5);\n    // createFlower(2, 0, -5);\n  };\n\n  // Function to create clouds\n  const createClouds = () => {\n    const clouds = [];\n    function createCloud(x, y, z) {\n      const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n      const cloudMaterial = new THREE.MeshBasicMaterial({\n        color: 0xFFFFFF\n      });\n      const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n      cloud.position.set(x, y, z);\n      scene.current.add(cloud);\n      clouds.push(cloud);\n    }\n    // Example positions\n    // createCloud(-5, 2, -10);\n    // createCloud(0, 3, -10);\n    // createCloud(5, 2, -10);\n  };\n  const createText = () => {\n    // Implementation of createText\n  };\n  const createSchools = () => {\n    // Implementation of createSchools\n  };\n  const createSun = () => {\n    // Implementation of createSun\n  };\n  return null;\n};\n_s(ThreeScene, \"aJnEvXCihyWGUb9DxL9iC3u1rik=\");\n_c = ThreeScene;\nexport default ThreeScene;\n\n//   // Function to create schools/buildings\n//   const createSchools = () => {\n//     const schools = [];\n\n//     function createSchool(x, y, z) {\n//       // Function to create a building\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         // Create the walls\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff }); // White color\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         // Create windows\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: 2, y: 0.8, z: 1.01 },\n//           { x: 2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         // Create horizontal strips\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         // Add components to the building group\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       // Create two buildings\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 10, y, z);\n\n//       // Add the buildings to the scene\n//       scene.current.add(building1);\n//       scene.current.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Example position\n//     createSchool(25, -3, -5);\n//   };\n\n//   // Function to create the sun\n//   const createSun = () => {\n//     const sunGroup = new THREE.Group();\n\n//     // Create the sun (half circle)\n//     const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//     const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 }); // Yellow color\n//     const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//     sun.position.set(34.5, -2, -5);\n//     sunGroup.add(sun);\n\n//     // Create rays\n//     const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 }); // Yellow color\n//     for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//       const rayGeometry = new THREE.BufferGeometry();\n//       const vertices = new Float32Array([\n//         Math.cos(i) * 2, Math.sin(i) * 2, -5,\n//         Math.cos(i) * 3, Math.sin(i) * 3, -5\n//       ]);\n//       rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//       const ray = new THREE.Line(rayGeometry, rayMaterial);\n//       sunGroup.add(ray);\n//     }\n//     // Add the sunGroup to the scene\n//     scene.current.add(sunGroup);\n//   };\n\n//   return <></>;\n// };\n\n// export default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["THREE","OrbitControls","ThreeScene","_s","scene","useRef","camera","renderer","cube","controls","notesDiv","checkpoints","notes","checkpointIndex","xMovement","xdistance","flowers","clouds","textMeshes","schools","useEffect","initScene","current","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","add","enableDamping","dampingFactor","screenSpacePanning","maxPolarAngle","Math","PI","position","z","createElement","style","textAlign","top","padding","border","backgroundColor","zIndex","addEventListener","onDocumentMouseDown","onKeyDown","createFlowers","createClouds","createText","createSchools","createSun","animate","animationId","requestAnimationFrame","update","rotation","x","y","render","cancelAnimationFrame","event","code","handleArrowRight","handleArrowLeft","scale","sin","cos","length","displayCheckpointNote","moveBackgroundElements","distance","forEach","flower","cloud","textMesh","school","innerText","display","setTimeout","preventDefault","raycaster","Raycaster","mouse","Vector2","clientX","clientY","setFromCamera","intersects","intersectObjects","intersectedObject","object","userData","url","open","handleResize","aspect","updateProjectionMatrix","cleanupAnimation","dispose","clear","removeChild","removeEventListener","createFlower","flowerGeometry","CylinderGeometry","flowerMaterial","flowerStem","flowerPetalGeometry","SphereGeometry","flowerPetalMaterial","flowerPetal","set","push","createCloud","cloudGeometry","cloudMaterial","_c","$RefreshReg$"],"sources":["/Users/swati/Documents/Portfoilo/reactthree/src/components/app.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst ThreeScene = () => {\n  const scene = useRef(null);\n  const camera = useRef(null);\n  const renderer = useRef(null);\n  const cube = useRef(null);\n  const controls = useRef(null);\n  const notesDiv = useRef(null);\n\n  const checkpoints = [0, 5, 8, 12, 30, 33];\n  const notes = [\n    \"Checkpoint 1: Move the right arrow key!\",\n    \"1\", \"2\", \"3\",\n    \"Checkpoint 2: Done Schooling from kendriya vidyalaya Sangathan, with lots of happy memories and Friends!\",\n    \"Click to Enter in the school!\"\n  ];\n  let checkpointIndex = 0;\n  let xMovement = 0;\n  const xdistance = 3;\n\n  const flowers = [];\n  const clouds = [];\n  const textMeshes = [];\n  const schools = [];\n\n  useEffect(() => {\n    const initScene = () => {\n      scene.current = new THREE.Scene();\n      camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer.current = new THREE.WebGLRenderer();\n      renderer.current.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(renderer.current.domElement);\n\n      const geometry = new THREE.BoxGeometry();\n      const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n      cube.current = new THREE.Mesh(geometry, material);\n      scene.current.add(cube.current);\n\n      controls.current = new OrbitControls(camera.current, renderer.current.domElement);\n      controls.current.enableDamping = true;\n      controls.current.dampingFactor = 0.25;\n      controls.current.screenSpacePanning = false;\n      controls.current.maxPolarAngle = Math.PI / 2;\n\n      camera.current.position.z = 5;\n\n      notesDiv.current = document.createElement('div');\n      notesDiv.current.style.position = 'absolute';\n      notesDiv.current.style.textAlign = 'center';\n      notesDiv.current.style.top = '30px';\n      notesDiv.current.style.padding = '10px';\n      notesDiv.current.style.border = '2px solid white';\n      notesDiv.current.style.backgroundColor = 'black';\n      notesDiv.current.style.zIndex = '1000';\n      document.body.appendChild(notesDiv.current);\n\n      document.addEventListener('mousedown', onDocumentMouseDown, false);\n      document.addEventListener('keydown', onKeyDown);\n\n      createFlowers();\n      createClouds();\n      createText();\n      createSchools();\n      createSun();\n    };\n\n    const animate = () => {\n      if (!scene.current || !camera.current || !renderer.current) {\n        return;\n      }\n\n      const animationId = requestAnimationFrame(animate);\n\n      if (controls.current) {\n        controls.current.update();\n      }\n\n      if (cube.current) {\n        cube.current.rotation.x += 0.01;\n        cube.current.rotation.y += 0.01;\n      }\n\n      renderer.current.render(scene.current, camera.current);\n\n      return () => {\n        cancelAnimationFrame(animationId);\n      };\n    };\n\n    const onKeyDown = (event) => {\n      if (event.code === 'ArrowRight') {\n        xMovement -= 3;\n        handleArrowRight();\n      } else if (event.code === 'ArrowLeft') {\n        xMovement += 3;\n        handleArrowLeft();\n      }\n    };\n\n    const handleArrowRight = () => {\n      if (cube.current) {\n        cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n        cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n        cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n      }\n\n      if (checkpointIndex < checkpoints.length && xMovement >= checkpoints[checkpointIndex]) {\n        displayCheckpointNote();\n        checkpointIndex++;\n      }\n\n      moveBackgroundElements(-xdistance);\n    };\n\n    const handleArrowLeft = () => {\n      if (cube.current) {\n        cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n        cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n        cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n      }\n\n      if (checkpointIndex > 0 && xMovement < checkpoints[checkpointIndex - 1] && checkpointIndex > 4) {\n        checkpointIndex--;\n        displayCheckpointNote();\n      }\n\n      moveBackgroundElements(xdistance);\n    };\n\n    const moveBackgroundElements = (distance) => {\n      flowers.forEach(flower => {\n        flower.position.x += distance;\n      });\n      clouds.forEach(cloud => {\n        cloud.position.x += distance;\n      });\n      textMeshes.forEach(textMesh => {\n        textMesh.position.x += distance;\n      });\n      schools.forEach(school => {\n        school.position.x += distance;\n      });\n    };\n\n    const displayCheckpointNote = () => {\n      if (notesDiv.current) {\n        notesDiv.current.innerText = notes[checkpointIndex];\n        notesDiv.current.style.display = 'block';\n        setTimeout(() => {\n          notesDiv.current.style.display = 'none';\n        }, 2000);\n      }\n    };\n\n    const onDocumentMouseDown = (event) => {\n      event.preventDefault();\n\n      const raycaster = new THREE.Raycaster();\n      const mouse = new THREE.Vector2();\n\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n      raycaster.setFromCamera(mouse, camera.current);\n\n      const intersects = raycaster.intersectObjects(textMeshes);\n      if (intersects.length > 0) {\n        const intersectedObject = intersects[0].object;\n        if (intersectedObject.userData.url) {\n          window.open(intersectedObject.userData.url, '_blank');\n        }\n      }\n    };\n\n    const handleResize = () => {\n      if (camera.current && renderer.current) {\n        camera.current.aspect = window.innerWidth / window.innerHeight;\n        camera.current.updateProjectionMatrix();\n        renderer.current.setSize(window.innerWidth, window.innerHeight);\n      }\n    };\n\n    initScene();\n    const cleanupAnimation = animate();\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      if (cleanupAnimation) {\n        cleanupAnimation();\n      }\n      if (controls.current) {\n        controls.current.dispose();\n      }\n      if (renderer.current) {\n        renderer.current.dispose();\n      }\n      if (scene.current) {\n        scene.current.clear();\n      }\n      if (renderer.current && renderer.current.domElement) {\n        document.body.removeChild(renderer.current.domElement);\n      }\n      if (notesDiv.current) {\n        document.body.removeChild(notesDiv.current);\n      }\n      document.removeEventListener('mousedown', onDocumentMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Function to create flowers\n  const createFlowers = () => {\n\n    function createFlower(x, y, z) {\n      const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n      const flowerMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\n      const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n\n      const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n      const flowerPetalMaterial = new THREE.MeshBasicMaterial({ color: 0xFF69B4 });\n      const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n\n      flowerStem.position.set(x, y, z);\n      flowerPetal.position.set(x, y + 0.6, z);\n\n      scene.current.add(flowerStem);\n      scene.current.add(flowerPetal);\n\n      flowers.push(flowerStem, flowerPetal);\n    }\n\n    // Example positions\n    // createFlower(-2, 0, -5);\n    // createFlower(0, 0, -5);\n    // createFlower(2, 0, -5);\n  };\n\n  // Function to create clouds\n  const createClouds = () => {\n    const clouds = [];\n\n    function createCloud(x, y, z) {\n      const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n      const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n      const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n      cloud.position.set(x, y, z);\n      scene.current.add(cloud);\n\n      clouds.push(cloud);\n    }\n    // Example positions\n    // createCloud(-5, 2, -10);\n    // createCloud(0, 3, -10);\n    // createCloud(5, 2, -10);\n  };\n\n  const createText = () => {\n    // Implementation of createText\n  };\n\n  const createSchools = () => {\n    // Implementation of createSchools\n  };\n\n  const createSun = () => {\n    // Implementation of createSun\n  };\n\n  return null;\n};\n\nexport default ThreeScene;\n\n\n\n\n\n\n\n\n//   // Function to create schools/buildings\n//   const createSchools = () => {\n//     const schools = [];\n\n//     function createSchool(x, y, z) {\n//       // Function to create a building\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         // Create the walls\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff }); // White color\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         // Create windows\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: 2, y: 0.8, z: 1.01 },\n//           { x: 2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         // Create horizontal strips\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         // Add components to the building group\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       // Create two buildings\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 10, y, z);\n\n//       // Add the buildings to the scene\n//       scene.current.add(building1);\n//       scene.current.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Example position\n//     createSchool(25, -3, -5);\n//   };\n\n//   // Function to create the sun\n//   const createSun = () => {\n//     const sunGroup = new THREE.Group();\n\n//     // Create the sun (half circle)\n//     const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//     const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 }); // Yellow color\n//     const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//     sun.position.set(34.5, -2, -5);\n//     sunGroup.add(sun);\n\n//     // Create rays\n//     const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 }); // Yellow color\n//     for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//       const rayGeometry = new THREE.BufferGeometry();\n//       const vertices = new Float32Array([\n//         Math.cos(i) * 2, Math.sin(i) * 2, -5,\n//         Math.cos(i) * 3, Math.sin(i) * 3, -5\n//       ]);\n//       rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//       const ray = new THREE.Line(rayGeometry, rayMaterial);\n//       sunGroup.add(ray);\n//     }\n//     // Add the sunGroup to the scene\n//     scene.current.add(sunGroup);\n//   };\n\n//   return <></>;\n// };\n\n// export default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}