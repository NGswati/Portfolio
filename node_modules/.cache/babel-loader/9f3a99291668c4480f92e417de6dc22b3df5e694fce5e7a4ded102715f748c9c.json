{"ast":null,"code":"// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// const ThreeScene = () => {\n//   const scene = useRef(null);\n//   const camera = useRef(null);\n//   const renderer = useRef(null);\n//   const cube = useRef(null);\n//   const controls = useRef(null);\n//   const notesDiv = useRef(null);\n\n//   const checkpoints = [0, 5, 8, 12, 30, 33];\n//   const notes = [\n//     \"Checkpoint 1: Move the right arrow key!\",\n//     \"1\", \"2\", \"3\",\n//     \"Checkpoint 2: Done Schooling from kendriya vidyalaya Sangathan, with lots of happy memories and Freinds!\",\n//     \"Click to Enter in the school!\"\n//   ];\n//   let checkpointIndex = 0;\n//   let xMovement = 0;\n//   const xdistance = 3;\n\n//   const flowers = [];\n//   const clouds =[];\n//   const textMeshes=[];\n//   const schools= [];\n\n//   useEffect(() => {\n//     const initScene = () => {\n//       // Scene, camera, renderer setup\n//       scene.current = new THREE.Scene();\n//       camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//       renderer.current = new THREE.WebGLRenderer();\n//       renderer.current.setSize(window.innerWidth, window.innerHeight);\n//       document.body.appendChild(renderer.current.domElement);\n\n//       // Cube setup\n//       const geometry = new THREE.BoxGeometry();\n//       const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//       cube.current = new THREE.Mesh(geometry, material);\n//       scene.current.add(cube.current);\n\n//       // Orbit controls setup\n//       controls.current = new OrbitControls(camera.current, renderer.current.domElement);\n//       controls.current.enableDamping = true;\n//       controls.current.dampingFactor = 0.25;\n//       controls.current.screenSpacePanning = false;\n//       controls.current.maxPolarAngle = Math.PI / 2;\n\n//       // Set initial camera position\n//       camera.current.position.z = 5;\n\n//       // Create notes display\n//       notesDiv.current = document.createElement('div');\n//       notesDiv.current.style.position = 'absolute';\n//       notesDiv.current.style.textAlign = 'center';\n//       notesDiv.current.style.top = '30px';\n//       notesDiv.current.style.padding = '10px';\n//       notesDiv.current.style.border = '2px solid white';\n//       notesDiv.current.style.backgroundColor = 'black';\n//       notesDiv.current.style.zIndex = '1000';\n//       document.body.appendChild(notesDiv.current);\n\n//       // Event listeners\n//       document.addEventListener('mousedown', onDocumentMouseDown, false);\n//       document.addEventListener('keydown', onKeyDown);\n\n//       // Create elements\n//       createFlowers();\n//       createClouds();\n//       createText();\n//       createSchools();\n//       createSun();\n\n//       // Start animation loop\n//       animate();\n//     };\n\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n\n//       // Update orbit controls\n//       controls.current.update();\n\n//       // Perform any other animations or updates\n//       cube.current.rotation.x += 0.01;\n//       cube.current.rotation.y += 0.01;\n\n//       // Render scene\n//       renderer.current.render(scene.current, camera.current);\n//     };\n\n//     const onKeyDown = (event) => {\n//       if (event.code === 'ArrowRight') {\n//         xMovement -= 3;\n//         handleArrowRight();\n//       } else if (event.code === 'ArrowLeft') {\n//         xMovement += 3;\n//         handleArrowLeft();\n//       }\n//     };\n\n//     const handleArrowRight = () => {\n//       cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n//       cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n//       cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n\n//       if (checkpointIndex < checkpoints.length && xMovement >= checkpoints[checkpointIndex]) {\n//         displayCheckpointNote();\n//         checkpointIndex++;\n//       }\n\n//       moveBackgroundElements(-xdistance);\n//     };\n\n//     const handleArrowLeft = () => {\n//       cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n//       cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n//       cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n\n//       if (checkpointIndex > 0 && xMovement < checkpoints[checkpointIndex - 1] && checkpointIndex > 4) {\n//         checkpointIndex--;\n//         displayCheckpointNote();\n//       }\n\n//       moveBackgroundElements(xdistance);\n//     };\n\n//     const moveBackgroundElements = (distance) => {\n\n//       flowers.forEach(flower => {\n//         flower.position.x += distance;\n//       });\n//       clouds.forEach(cloud => {\n//         cloud.position.x += distance;\n//       });\n//       textMeshes.forEach(textMesh => {\n//         textMesh.position.x += distance;\n//       });\n//       schools.forEach(school => {\n//         school.position.x += distance;\n//       });\n//     };\n\n//     const displayCheckpointNote = () => {\n//       notesDiv.current.innerText = notes[checkpointIndex];\n//       notesDiv.current.style.display = 'block';\n//       setTimeout(() => {\n//         notesDiv.current.style.display = 'none';\n//       }, 2000);\n//     };\n\n//     const onDocumentMouseDown = (event) => {\n//       event.preventDefault();\n\n//       const raycaster = new THREE.Raycaster();\n//       const mouse = new THREE.Vector2();\n\n//       mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n//       mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n//       raycaster.setFromCamera(mouse, camera.current);\n\n//       const intersects = raycaster.intersectObjects(textMeshes);\n//       if (intersects.length > 0) {\n//         const intersectedObject = intersects[0].object;\n//         if (intersectedObject.userData.url) {\n//           window.open(intersectedObject.userData.url, '_blank');\n//         }\n//       }\n//     };\n\n//     // Initialize scene when component mounts\n//     initScene();\n\n//     // Clean up Three.js scene when component unmounts\n//     return () => {\n//       // Dispose Three.js objects, remove event listeners, etc.\n//       scene.current = null;\n//       camera.current = null;\n//       renderer.current = null;\n//       cube.current = null;\n//       controls.current.dispose();\n//       controls.current = null;\n//       document.removeEventListener('mousedown', onDocumentMouseDown);\n//       document.removeEventListener('keydown', onKeyDown);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     const handleResize = () => {\n//       if (camera.current) {\n//         camera.current.aspect = window.innerWidth / window.innerHeight;\n//         camera.current.updateProjectionMatrix();\n//         renderer.current.setSize(window.innerWidth, window.innerHeight);\n//       }\n//     };\n\n//     window.addEventListener('resize', handleResize);\n\n//     return () => {\n//       window.removeEventListener('resize', handleResize);\n//     };\n//   }, []);\n\n//   // Function to create flowers\nconst createFlowers = () => {\n  const flowers = [];\n  function createFlower(x, y, z) {\n    const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n    const flowerMaterial = new THREE.MeshBasicMaterial({\n      color: 0x8B4513\n    });\n    const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n    const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n    const flowerPetalMaterial = new THREE.MeshBasicMaterial({\n      color: 0xFF69B4\n    });\n    const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n    flowerStem.position.set(x, y, z);\n    flowerPetal.position.set(x, y + 0.6, z);\n    scene.current.add(flowerStem);\n    scene.current.add(flowerPetal);\n    flowers.push(flowerStem, flowerPetal);\n  }\n\n  // Example positions\n  // createFlower(-2, 0, -5);\n  // createFlower(0, 0, -5);\n  // createFlower(2, 0, -5);\n};\n\n//   // Function to create clouds\n//   const createClouds = () => {\n//     const clouds = [];\n\n//     function createCloud(x, y, z) {\n//       const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n//       const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n//       const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n//       cloud.position.set(x, y, z);\n//       scene.current.add(cloud);\n\n//       clouds.push(cloud);\n//     }\n\n//     // Example positions\n//     // createCloud(-5, 2, -10);\n//     // createCloud(0, 3, -10);\n//     // createCloud(5, 2, -10);\n//   };\n\n//   // Function to create text labels\n//   const createText = () => {\n//     // const loader = new THREE.FontLoader();\n//     // loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n//     //   const createTextMesh = (text, x, y, z, size, color) => {\n//     //     const textGeometry = new THREE.TextGeometry(text, {\n//     //       font: font,\n//     //       size: size,\n//     //       height: 0.1,\n//     //       curveSegments: 2,\n//     //       bevelEnabled: false\n//     //     });\n//     //     const textMaterial = new THREE.MeshBasicMaterial({ color: color });\n//     //     const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n//     //     textMesh.position.set(x, y, z);\n//     //     scene.current.add(textMesh);\n//     //   };\n\n//     //   // Example text labels\n//     //   // createTextMesh('Welcome to Three.js', -6, 5, -5, 1, 0xffffff);\n//     //   // createTextMesh('Hello, I am Swati', -4.3, 2, -5, 1, 0xffffff);\n//     //   // createTextMesh('A passionate developer and tech enthusiast', -6.4, -3, -5, 0.5, 0xffffff);\n//     //   // createTextMesh('Let\\'s move forward...', -3, -4.2, -5, 0.5, 0xffffff);\n//     // });\n//   };\n\n//   // Function to create schools/buildings\n//   const createSchools = () => {\n//     const schools = [];\n\n//     function createSchool(x, y, z) {\n//       // Function to create a building\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         // Create the walls\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff }); // White color\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         // Create windows\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: 2, y: 0.8, z: 1.01 },\n//           { x: 2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         // Create horizontal strips\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         // Add components to the building group\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       // Create two buildings\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 10, y, z);\n\n//       // Add the buildings to the scene\n//       scene.current.add(building1);\n//       scene.current.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Example position\n//     createSchool(25, -3, -5);\n//   };\n\n//   // Function to create the sun\n//   const createSun = () => {\n//     const sunGroup = new THREE.Group();\n\n//     // Create the sun (half circle)\n//     const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//     const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 }); // Yellow color\n//     const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//     sun.position.set(34.5, -2, -5);\n//     sunGroup.add(sun);\n\n//     // Create rays\n//     const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 }); // Yellow color\n//     for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//       const rayGeometry = new THREE.BufferGeometry();\n//       const vertices = new Float32Array([\n//         Math.cos(i) * 2, Math.sin(i) * 2, -5,\n//         Math.cos(i) * 3, Math.sin(i) * 3, -5\n//       ]);\n//       rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//       const ray = new THREE.Line(rayGeometry, rayMaterial);\n//       sunGroup.add(ray);\n//     }\n//     // Add the sunGroup to the scene\n//     scene.current.add(sunGroup);\n//   };\n\n//   return <></>;\n// };\n\n// export default ThreeScene;","map":{"version":3,"names":["createFlowers","flowers","createFlower","x","y","z","flowerGeometry","THREE","CylinderGeometry","flowerMaterial","MeshBasicMaterial","color","flowerStem","Mesh","flowerPetalGeometry","SphereGeometry","flowerPetalMaterial","flowerPetal","position","set","scene","current","add","push"],"sources":["/Users/swati/Documents/Portfoilo/reactthree/src/components/app.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// const ThreeScene = () => {\n//   const scene = useRef(null);\n//   const camera = useRef(null);\n//   const renderer = useRef(null);\n//   const cube = useRef(null);\n//   const controls = useRef(null);\n//   const notesDiv = useRef(null);\n\n//   const checkpoints = [0, 5, 8, 12, 30, 33];\n//   const notes = [\n//     \"Checkpoint 1: Move the right arrow key!\",\n//     \"1\", \"2\", \"3\",\n//     \"Checkpoint 2: Done Schooling from kendriya vidyalaya Sangathan, with lots of happy memories and Freinds!\",\n//     \"Click to Enter in the school!\"\n//   ];\n//   let checkpointIndex = 0;\n//   let xMovement = 0;\n//   const xdistance = 3;\n\n\n//   const flowers = [];\n//   const clouds =[];\n//   const textMeshes=[];\n//   const schools= [];\n\n//   useEffect(() => {\n//     const initScene = () => {\n//       // Scene, camera, renderer setup\n//       scene.current = new THREE.Scene();\n//       camera.current = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n//       renderer.current = new THREE.WebGLRenderer();\n//       renderer.current.setSize(window.innerWidth, window.innerHeight);\n//       document.body.appendChild(renderer.current.domElement);\n\n//       // Cube setup\n//       const geometry = new THREE.BoxGeometry();\n//       const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n//       cube.current = new THREE.Mesh(geometry, material);\n//       scene.current.add(cube.current);\n\n//       // Orbit controls setup\n//       controls.current = new OrbitControls(camera.current, renderer.current.domElement);\n//       controls.current.enableDamping = true;\n//       controls.current.dampingFactor = 0.25;\n//       controls.current.screenSpacePanning = false;\n//       controls.current.maxPolarAngle = Math.PI / 2;\n\n//       // Set initial camera position\n//       camera.current.position.z = 5;\n\n//       // Create notes display\n//       notesDiv.current = document.createElement('div');\n//       notesDiv.current.style.position = 'absolute';\n//       notesDiv.current.style.textAlign = 'center';\n//       notesDiv.current.style.top = '30px';\n//       notesDiv.current.style.padding = '10px';\n//       notesDiv.current.style.border = '2px solid white';\n//       notesDiv.current.style.backgroundColor = 'black';\n//       notesDiv.current.style.zIndex = '1000';\n//       document.body.appendChild(notesDiv.current);\n\n//       // Event listeners\n//       document.addEventListener('mousedown', onDocumentMouseDown, false);\n//       document.addEventListener('keydown', onKeyDown);\n\n//       // Create elements\n//       createFlowers();\n//       createClouds();\n//       createText();\n//       createSchools();\n//       createSun();\n\n//       // Start animation loop\n//       animate();\n//     };\n\n//     const animate = () => {\n//       requestAnimationFrame(animate);\n\n//       // Update orbit controls\n//       controls.current.update();\n\n//       // Perform any other animations or updates\n//       cube.current.rotation.x += 0.01;\n//       cube.current.rotation.y += 0.01;\n\n//       // Render scene\n//       renderer.current.render(scene.current, camera.current);\n//     };\n\n//     const onKeyDown = (event) => {\n//       if (event.code === 'ArrowRight') {\n//         xMovement -= 3;\n//         handleArrowRight();\n//       } else if (event.code === 'ArrowLeft') {\n//         xMovement += 3;\n//         handleArrowLeft();\n//       }\n//     };\n\n//     const handleArrowRight = () => {\n//       cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n//       cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n//       cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n\n//       if (checkpointIndex < checkpoints.length && xMovement >= checkpoints[checkpointIndex]) {\n//         displayCheckpointNote();\n//         checkpointIndex++;\n//       }\n\n//       moveBackgroundElements(-xdistance);\n//     };\n\n//     const handleArrowLeft = () => {\n//       cube.current.scale.x = 1 + Math.sin(xMovement) * 0.1;\n//       cube.current.scale.y = 1 + Math.cos(xMovement) * 0.1;\n//       cube.current.scale.z = 1 + Math.sin(xMovement) * 0.1;\n\n//       if (checkpointIndex > 0 && xMovement < checkpoints[checkpointIndex - 1] && checkpointIndex > 4) {\n//         checkpointIndex--;\n//         displayCheckpointNote();\n//       }\n\n//       moveBackgroundElements(xdistance);\n//     };\n\n//     const moveBackgroundElements = (distance) => {\n      \n//       flowers.forEach(flower => {\n//         flower.position.x += distance;\n//       });\n//       clouds.forEach(cloud => {\n//         cloud.position.x += distance;\n//       });\n//       textMeshes.forEach(textMesh => {\n//         textMesh.position.x += distance;\n//       });\n//       schools.forEach(school => {\n//         school.position.x += distance;\n//       });\n//     };\n\n//     const displayCheckpointNote = () => {\n//       notesDiv.current.innerText = notes[checkpointIndex];\n//       notesDiv.current.style.display = 'block';\n//       setTimeout(() => {\n//         notesDiv.current.style.display = 'none';\n//       }, 2000);\n//     };\n\n//     const onDocumentMouseDown = (event) => {\n//       event.preventDefault();\n\n//       const raycaster = new THREE.Raycaster();\n//       const mouse = new THREE.Vector2();\n\n//       mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n//       mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n//       raycaster.setFromCamera(mouse, camera.current);\n\n//       const intersects = raycaster.intersectObjects(textMeshes);\n//       if (intersects.length > 0) {\n//         const intersectedObject = intersects[0].object;\n//         if (intersectedObject.userData.url) {\n//           window.open(intersectedObject.userData.url, '_blank');\n//         }\n//       }\n//     };\n\n//     // Initialize scene when component mounts\n//     initScene();\n\n//     // Clean up Three.js scene when component unmounts\n//     return () => {\n//       // Dispose Three.js objects, remove event listeners, etc.\n//       scene.current = null;\n//       camera.current = null;\n//       renderer.current = null;\n//       cube.current = null;\n//       controls.current.dispose();\n//       controls.current = null;\n//       document.removeEventListener('mousedown', onDocumentMouseDown);\n//       document.removeEventListener('keydown', onKeyDown);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     const handleResize = () => {\n//       if (camera.current) {\n//         camera.current.aspect = window.innerWidth / window.innerHeight;\n//         camera.current.updateProjectionMatrix();\n//         renderer.current.setSize(window.innerWidth, window.innerHeight);\n//       }\n//     };\n\n//     window.addEventListener('resize', handleResize);\n\n//     return () => {\n//       window.removeEventListener('resize', handleResize);\n//     };\n//   }, []);\n\n//   // Function to create flowers\n  const createFlowers = () => {\n    const flowers = [];\n\n    function createFlower(x, y, z) {\n      const flowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 32);\n      const flowerMaterial = new THREE.MeshBasicMaterial({ color: 0x8B4513 });\n      const flowerStem = new THREE.Mesh(flowerGeometry, flowerMaterial);\n\n      const flowerPetalGeometry = new THREE.SphereGeometry(0.3, 32, 32);\n      const flowerPetalMaterial = new THREE.MeshBasicMaterial({ color: 0xFF69B4 });\n      const flowerPetal = new THREE.Mesh(flowerPetalGeometry, flowerPetalMaterial);\n\n      flowerStem.position.set(x, y, z);\n      flowerPetal.position.set(x, y + 0.6, z);\n\n      scene.current.add(flowerStem);\n      scene.current.add(flowerPetal);\n\n      flowers.push(flowerStem, flowerPetal);\n    }\n\n    // Example positions\n    // createFlower(-2, 0, -5);\n    // createFlower(0, 0, -5);\n    // createFlower(2, 0, -5);\n  };\n\n//   // Function to create clouds\n//   const createClouds = () => {\n//     const clouds = [];\n\n//     function createCloud(x, y, z) {\n//       const cloudGeometry = new THREE.SphereGeometry(1, 32, 32);\n//       const cloudMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });\n//       const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n\n//       cloud.position.set(x, y, z);\n//       scene.current.add(cloud);\n\n//       clouds.push(cloud);\n//     }\n\n//     // Example positions\n//     // createCloud(-5, 2, -10);\n//     // createCloud(0, 3, -10);\n//     // createCloud(5, 2, -10);\n//   };\n\n//   // Function to create text labels\n//   const createText = () => {\n//     // const loader = new THREE.FontLoader();\n//     // loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n//     //   const createTextMesh = (text, x, y, z, size, color) => {\n//     //     const textGeometry = new THREE.TextGeometry(text, {\n//     //       font: font,\n//     //       size: size,\n//     //       height: 0.1,\n//     //       curveSegments: 2,\n//     //       bevelEnabled: false\n//     //     });\n//     //     const textMaterial = new THREE.MeshBasicMaterial({ color: color });\n//     //     const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n//     //     textMesh.position.set(x, y, z);\n//     //     scene.current.add(textMesh);\n//     //   };\n\n//     //   // Example text labels\n//     //   // createTextMesh('Welcome to Three.js', -6, 5, -5, 1, 0xffffff);\n//     //   // createTextMesh('Hello, I am Swati', -4.3, 2, -5, 1, 0xffffff);\n//     //   // createTextMesh('A passionate developer and tech enthusiast', -6.4, -3, -5, 0.5, 0xffffff);\n//     //   // createTextMesh('Let\\'s move forward...', -3, -4.2, -5, 0.5, 0xffffff);\n//     // });\n//   };\n\n//   // Function to create schools/buildings\n//   const createSchools = () => {\n//     const schools = [];\n\n//     function createSchool(x, y, z) {\n//       // Function to create a building\n//       function createBuilding(xOffset, yOffset, zOffset) {\n//         const building = new THREE.Group();\n\n//         // Create the walls\n//         const wallGeometry = new THREE.BoxGeometry(5, 5, 2);\n//         const wallMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff }); // White color\n//         const walls = new THREE.Mesh(wallGeometry, wallMaterial);\n//         walls.position.set(xOffset, yOffset, zOffset);\n\n//         // Create windows\n//         const windowGeometry = new THREE.BoxGeometry(0.5, 0.7, 0.1);\n//         const windowMaterial = new THREE.MeshBasicMaterial({ color: 0x444444 });\n//         const windows = [\n//           { x: -1, y: 0.8, z: 1.01 },\n//           { x: 0, y: 0.8, z: 1.01 },\n//           { x: 1, y: 0.8, z: 1.01 },\n//           { x: -1, y: -1, z: 1.01 },\n//           { x: 0, y: -1, z: 1.01 },\n//           { x: 1, y: -1, z: 1.01 },\n//           { x: -2, y: 0.8, z: 1.01 },\n//           { x: -2, y: -1, z: 1.01 },\n//           { x: 2, y: 0.8, z: 1.01 },\n//           { x: 2, y: -1, z: 1.01 },\n//         ];\n\n//         windows.forEach((pos) => {\n//           const windowMesh = new THREE.Mesh(windowGeometry, windowMaterial);\n//           windowMesh.position.set(xOffset + pos.x, yOffset + pos.y, zOffset + pos.z);\n//           building.add(windowMesh);\n//         });\n\n//         // Create horizontal strips\n//         const stripGeometry = new THREE.BoxGeometry(5, 0.3, 2);\n//         const stripMaterial = new THREE.MeshBasicMaterial({ color: 0x04192 });\n\n//         const strip1 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip1.position.set(xOffset, yOffset + 1.5, zOffset);\n\n//         const strip2 = new THREE.Mesh(stripGeometry, stripMaterial);\n//         strip2.position.set(xOffset, yOffset - 0.2, zOffset);\n\n//         // Add components to the building group\n//         building.add(walls);\n//         building.add(strip1);\n//         building.add(strip2);\n\n//         return building;\n//       }\n\n//       // Create two buildings\n//       const building1 = createBuilding(x, y, z);\n//       const building2 = createBuilding(x + 10, y, z);\n\n//       // Add the buildings to the scene\n//       scene.current.add(building1);\n//       scene.current.add(building2);\n\n//       schools.push(building1, building2);\n//     }\n\n//     // Example position\n//     createSchool(25, -3, -5);\n//   };\n\n//   // Function to create the sun\n//   const createSun = () => {\n//     const sunGroup = new THREE.Group();\n\n//     // Create the sun (half circle)\n//     const sunGeometry = new THREE.CircleGeometry(1, 32, 0, Math.PI);\n//     const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 }); // Yellow color\n//     const sun = new THREE.Mesh(sunGeometry, sunMaterial);\n//     sun.position.set(34.5, -2, -5);\n//     sunGroup.add(sun);\n\n//     // Create rays\n//     const rayMaterial = new THREE.LineBasicMaterial({ color: 0xd34000 }); // Yellow color\n//     for (let i = 0; i <= Math.PI; i += Math.PI / 11) {\n//       const rayGeometry = new THREE.BufferGeometry();\n//       const vertices = new Float32Array([\n//         Math.cos(i) * 2, Math.sin(i) * 2, -5,\n//         Math.cos(i) * 3, Math.sin(i) * 3, -5\n//       ]);\n//       rayGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n//       const ray = new THREE.Line(rayGeometry, rayMaterial);\n//       sunGroup.add(ray);\n//     }\n//     // Add the sunGroup to the scene\n//     scene.current.add(sunGroup);\n//   };\n\n//   return <></>;\n// };\n\n// export default ThreeScene;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACE,MAAMA,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,OAAO,GAAG,EAAE;EAElB,SAASC,YAAYA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC7B,MAAMC,cAAc,GAAG,IAAIC,KAAK,CAACC,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;IAClE,MAAMC,cAAc,GAAG,IAAIF,KAAK,CAACG,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IACvE,MAAMC,UAAU,GAAG,IAAIL,KAAK,CAACM,IAAI,CAACP,cAAc,EAAEG,cAAc,CAAC;IAEjE,MAAMK,mBAAmB,GAAG,IAAIP,KAAK,CAACQ,cAAc,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;IACjE,MAAMC,mBAAmB,GAAG,IAAIT,KAAK,CAACG,iBAAiB,CAAC;MAAEC,KAAK,EAAE;IAAS,CAAC,CAAC;IAC5E,MAAMM,WAAW,GAAG,IAAIV,KAAK,CAACM,IAAI,CAACC,mBAAmB,EAAEE,mBAAmB,CAAC;IAE5EJ,UAAU,CAACM,QAAQ,CAACC,GAAG,CAAChB,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAChCY,WAAW,CAACC,QAAQ,CAACC,GAAG,CAAChB,CAAC,EAAEC,CAAC,GAAG,GAAG,EAAEC,CAAC,CAAC;IAEvCe,KAAK,CAACC,OAAO,CAACC,GAAG,CAACV,UAAU,CAAC;IAC7BQ,KAAK,CAACC,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC;IAE9BhB,OAAO,CAACsB,IAAI,CAACX,UAAU,EAAEK,WAAW,CAAC;EACvC;;EAEA;EACA;EACA;EACA;AACF,CAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}